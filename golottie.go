// package golottie renders [Lottie]
// animations generated by [BodyMovin]
// using headless browser instance through [chromedp].
//
// For examples checkout [go-lottie]
//
// [Lottie]: https://airbnb.design/lottie/
// [BodyMovin]: https://aescripts.com/bodymovin/
// [chromedp]: https://github.com/chromedp/chromedp
// [go-lottie]: https://github.com/icyrogue/go-lottie
package golottie

import (
	"fmt"

	"github.com/chromedp/chromedp"
)

type Renderer struct {
	framesDone  int
	framesTotal int
	ctx         Context
}

// New creates a new renderer instance with parent context.
func New(ctx Context) (renderer *Renderer) {
	return &Renderer{ctx: ctx}
}

// SetAnimation sets renderer animation.
// Renderer calls [AnimationData.GetFramesTotal] and [AnimationData.GetURL]
// to update the animation.
func (r *Renderer) SetAnimation(animation Animation) error {
	r.framesTotal = animation.GetFramesTotal()
	if err := chromedp.Run(r.ctx,
		chromedp.Navigate(animation.GetURL()),
		//		chromedp.WaitReady("#lottie"),
	); err != nil {
		return err
	}
	return nil
}

// NextFrame advances the current animation frame by one.
// Returns [EOF] if there aren't any frames left.
func (r *Renderer) NextFrame() bool {
	if r.framesDone >= r.framesTotal {
		r.ctx.Error(EOF)
		return false
	}
	if err := chromedp.Run(r.ctx,
		chromedp.Evaluate(fmt.Sprintf("anim.goToAndStop(%d, true)", r.framesDone), nil),
	); err != nil {
		r.ctx.Error(err)
		return false
	}
	r.framesDone++
	return true
}

// RenderFrame renders current frame as PNG and writes the resulting
// bytes to the provided frame buffer.
func (r *Renderer) RenderFrame(frameBuf *[]byte) error {
	return chromedp.Run(r.ctx,
		chromedp.Screenshot("#lottie", frameBuf, chromedp.ByQuery))
}

// RenderFrameSVG renders current frame as SVG and writes the resulting
// SVG string to the provided frame buffer.
func (r *Renderer) RenderFrameSVG(frameBuf *string) error {
	return chromedp.Run(r.ctx,
		chromedp.OuterHTML("svg", frameBuf, chromedp.ByQuery))
}

// func (r *Renderer) RenderAll(frames *[]*[]byte) error {
// 	return chromedp.Run(r.ctx, chromedp.ActionFunc(func(ctx context.Context) error {
// 		var err error
// 		for i, frame := range *frames {
// 			if err = chromedp.Screenshot("#lottie", frame, chromedp.ByQuery).Do(ctx); err != nil {
// 				return err
// 			}
// 			if err = chromedp.Evaluate(fmt.Sprintf("anim.goToAndStop(%d, true)", i), nil).Do(ctx); err != nil {
// 				return err
// 			}
// 		}
// 		return nil
// 	}))
// }
